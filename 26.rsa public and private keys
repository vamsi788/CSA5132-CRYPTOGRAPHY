#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function to calculate GCD (Greatest Common Divisor)
int gcd(int a, int b) {
    int temp;
    while (b != 0) {
        temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to calculate modular inverse using Extended Euclidean Algorithm
int mod_inverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    // Apply extended Euclid Algorithm
    while (a > 1) {
        q = a / m;
        t = m;

        m = a % m, a = t;
        t = x0;

        x0 = x1 - q * x0;
        x1 = t;
    }

    // Make x1 positive
    if (x1 < 0)
        x1 += m0;

    return x1;
}

// Function to perform RSA encryption
int rsa_encrypt(int plaintext, int e, int n) {
    int ciphertext;
    ciphertext = fmod(pow(plaintext, e), n);
    return ciphertext;
}

// Function to perform RSA decryption
int rsa_decrypt(int ciphertext, int d, int n) {
    int plaintext;
    plaintext = fmod(pow(ciphertext, d), n);
    return plaintext;
}

int main() {
    int p, q, n, phi, e, d; // RSA parameters
    int plaintext, ciphertext, decryptedtext;

    // Bob's initial key generation
    p = 61; // prime number
    q = 53; // prime number
    n = p * q; // modulus
    phi = (p - 1) * (q - 1); // Euler's totient function
    e = 17; // public exponent
    d = mod_inverse(e, phi); // private exponent

    printf("Bob's original public key (e, n): (%d, %d)\n", e, n);
    printf("Bob's original private key: %d\n", d);

    // Example plaintext block
    plaintext = 1234;

    // Encrypt plaintext using Bob's public key
    ciphertext = rsa_encrypt(plaintext, e, n);
    printf("Ciphertext: %d\n", ciphertext);

    // Decrypt ciphertext using Bob's private key
    decryptedtext = rsa_decrypt(ciphertext, d, n);
    printf("Decryptedtext: %d\n", decryptedtext);

    // Suppose Bob's private key is leaked
    printf("\nBob's private key has been leaked!\n");

    // Bob decides to generate a new key pair without changing the modulus
    e = 31; // new public exponent
    d = mod_inverse(e, phi); // new private exponent

    printf("Bob's new public key (e, n): (%d, %d)\n", e, n);
    printf("Bob's new private key: %d\n", d);

    // Attempt to decrypt ciphertext using Bob's new private key
    decryptedtext = rsa_decrypt(ciphertext, d, n);
    printf("Decryptedtext using new private key: %d\n", decryptedtext);

    return 0;
}
